// Code generated by protoc-gen-go. DO NOT EDIT.
// source: squeeze.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// All supported protocols
type Protocol int32

const (
	Protocol_UNKNOWN   Protocol = 0
	Protocol_HTTP      Protocol = 1
	Protocol_TCP       Protocol = 2
	Protocol_UDP       Protocol = 3
	Protocol_REDIS     Protocol = 4
	Protocol_MYSQL     Protocol = 5
	Protocol_MONGO     Protocol = 6
	Protocol_GRPC      Protocol = 7
	Protocol_THRIFT    Protocol = 8
	Protocol_WEBSOCKET Protocol = 9
)

var Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "HTTP",
	2: "TCP",
	3: "UDP",
	4: "REDIS",
	5: "MYSQL",
	6: "MONGO",
	7: "GRPC",
	8: "THRIFT",
	9: "WEBSOCKET",
}
var Protocol_value = map[string]int32{
	"UNKNOWN":   0,
	"HTTP":      1,
	"TCP":       2,
	"UDP":       3,
	"REDIS":     4,
	"MYSQL":     5,
	"MONGO":     6,
	"GRPC":      7,
	"THRIFT":    8,
	"WEBSOCKET": 9,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{0}
}

type HeartBeatRequest_Task_Status int32

const (
	HeartBeatRequest_Task_DONE    HeartBeatRequest_Task_Status = 0
	HeartBeatRequest_Task_RUNNING HeartBeatRequest_Task_Status = 1
)

var HeartBeatRequest_Task_Status_name = map[int32]string{
	0: "DONE",
	1: "RUNNING",
}
var HeartBeatRequest_Task_Status_value = map[string]int32{
	"DONE":    0,
	"RUNNING": 1,
}

func (x HeartBeatRequest_Task_Status) String() string {
	return proto.EnumName(HeartBeatRequest_Task_Status_name, int32(x))
}
func (HeartBeatRequest_Task_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{0, 1, 0}
}

type ExecuteTaskRequest_Command int32

const (
	ExecuteTaskRequest_START ExecuteTaskRequest_Command = 0
	ExecuteTaskRequest_STOP  ExecuteTaskRequest_Command = 1
)

var ExecuteTaskRequest_Command_name = map[int32]string{
	0: "START",
	1: "STOP",
}
var ExecuteTaskRequest_Command_value = map[string]int32{
	"START": 0,
	"STOP":  1,
}

func (x ExecuteTaskRequest_Command) String() string {
	return proto.EnumName(ExecuteTaskRequest_Command_name, int32(x))
}
func (ExecuteTaskRequest_Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{3, 0}
}

type ExecuteTaskResponse_Status int32

const (
	ExecuteTaskResponse_SUCC ExecuteTaskResponse_Status = 0
	ExecuteTaskResponse_FAIL ExecuteTaskResponse_Status = 1
)

var ExecuteTaskResponse_Status_name = map[int32]string{
	0: "SUCC",
	1: "FAIL",
}
var ExecuteTaskResponse_Status_value = map[string]int32{
	"SUCC": 0,
	"FAIL": 1,
}

func (x ExecuteTaskResponse_Status) String() string {
	return proto.EnumName(ExecuteTaskResponse_Status_name, int32(x))
}
func (ExecuteTaskResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{4, 0}
}

// HeartBeatRequest describes the tasks status on the slave
// and the information about the slave & host.
type HeartBeatRequest struct {
	Task                 *HeartBeatRequest_Task      `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Info                 *HeartBeatRequest_SlaveInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *HeartBeatRequest) Reset()         { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()    {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{0}
}
func (m *HeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeatRequest.Unmarshal(m, b)
}
func (m *HeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeatRequest.Marshal(b, m, deterministic)
}
func (dst *HeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatRequest.Merge(dst, src)
}
func (m *HeartBeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartBeatRequest.Size(m)
}
func (m *HeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatRequest proto.InternalMessageInfo

func (m *HeartBeatRequest) GetTask() *HeartBeatRequest_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *HeartBeatRequest) GetInfo() *HeartBeatRequest_SlaveInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type HeartBeatRequest_SlaveInfo struct {
	GrpcPort             uint32   `protobuf:"varint,1,opt,name=grpcPort,proto3" json:"grpcPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeatRequest_SlaveInfo) Reset()         { *m = HeartBeatRequest_SlaveInfo{} }
func (m *HeartBeatRequest_SlaveInfo) String() string { return proto.CompactTextString(m) }
func (*HeartBeatRequest_SlaveInfo) ProtoMessage()    {}
func (*HeartBeatRequest_SlaveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{0, 0}
}
func (m *HeartBeatRequest_SlaveInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeatRequest_SlaveInfo.Unmarshal(m, b)
}
func (m *HeartBeatRequest_SlaveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeatRequest_SlaveInfo.Marshal(b, m, deterministic)
}
func (dst *HeartBeatRequest_SlaveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatRequest_SlaveInfo.Merge(dst, src)
}
func (m *HeartBeatRequest_SlaveInfo) XXX_Size() int {
	return xxx_messageInfo_HeartBeatRequest_SlaveInfo.Size(m)
}
func (m *HeartBeatRequest_SlaveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatRequest_SlaveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatRequest_SlaveInfo proto.InternalMessageInfo

func (m *HeartBeatRequest_SlaveInfo) GetGrpcPort() uint32 {
	if m != nil {
		return m.GrpcPort
	}
	return 0
}

type HeartBeatRequest_Task struct {
	Id                   uint32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               HeartBeatRequest_Task_Status `protobuf:"varint,2,opt,name=status,proto3,enum=pb.HeartBeatRequest_Task_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *HeartBeatRequest_Task) Reset()         { *m = HeartBeatRequest_Task{} }
func (m *HeartBeatRequest_Task) String() string { return proto.CompactTextString(m) }
func (*HeartBeatRequest_Task) ProtoMessage()    {}
func (*HeartBeatRequest_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{0, 1}
}
func (m *HeartBeatRequest_Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeatRequest_Task.Unmarshal(m, b)
}
func (m *HeartBeatRequest_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeatRequest_Task.Marshal(b, m, deterministic)
}
func (dst *HeartBeatRequest_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatRequest_Task.Merge(dst, src)
}
func (m *HeartBeatRequest_Task) XXX_Size() int {
	return xxx_messageInfo_HeartBeatRequest_Task.Size(m)
}
func (m *HeartBeatRequest_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatRequest_Task.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatRequest_Task proto.InternalMessageInfo

func (m *HeartBeatRequest_Task) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HeartBeatRequest_Task) GetStatus() HeartBeatRequest_Task_Status {
	if m != nil {
		return m.Status
	}
	return HeartBeatRequest_Task_DONE
}

// HeartBeatResponse for HeartBeatRequest, is used to send tasks from master to slave.
// !!!Send task is not yet supported!!!
type HeartBeatResponse struct {
	Tasks                []*TaskRequest `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HeartBeatResponse) Reset()         { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()    {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{1}
}
func (m *HeartBeatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeatResponse.Unmarshal(m, b)
}
func (m *HeartBeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeatResponse.Marshal(b, m, deterministic)
}
func (dst *HeartBeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatResponse.Merge(dst, src)
}
func (m *HeartBeatResponse) XXX_Size() int {
	return xxx_messageInfo_HeartBeatResponse.Size(m)
}
func (m *HeartBeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatResponse proto.InternalMessageInfo

func (m *HeartBeatResponse) GetTasks() []*TaskRequest {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type TaskRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{2}
}
func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRequest.Unmarshal(m, b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
}
func (dst *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(dst, src)
}
func (m *TaskRequest) XXX_Size() int {
	return xxx_messageInfo_TaskRequest.Size(m)
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

// ExecuteTaskRequest describes the task information to be executed.
type ExecuteTaskRequest struct {
	Cmd                  ExecuteTaskRequest_Command `protobuf:"varint,1,opt,name=cmd,proto3,enum=pb.ExecuteTaskRequest_Command" json:"cmd,omitempty"`
	Protocol             Protocol                   `protobuf:"varint,2,opt,name=protocol,proto3,enum=pb.Protocol" json:"protocol,omitempty"`
	Callback             string                     `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
	Duration             uint32                     `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Id                   uint32                     `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Concurrency          uint32                     `protobuf:"varint,6,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	Requests             uint32                     `protobuf:"varint,7,opt,name=requests,proto3" json:"requests,omitempty"`
	RateLimit            uint32                     `protobuf:"varint,8,opt,name=rateLimit,proto3" json:"rateLimit,omitempty"`
	Data                 string                     `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ExecuteTaskRequest) Reset()         { *m = ExecuteTaskRequest{} }
func (m *ExecuteTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteTaskRequest) ProtoMessage()    {}
func (*ExecuteTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{3}
}
func (m *ExecuteTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteTaskRequest.Unmarshal(m, b)
}
func (m *ExecuteTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteTaskRequest.Marshal(b, m, deterministic)
}
func (dst *ExecuteTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteTaskRequest.Merge(dst, src)
}
func (m *ExecuteTaskRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteTaskRequest.Size(m)
}
func (m *ExecuteTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteTaskRequest proto.InternalMessageInfo

func (m *ExecuteTaskRequest) GetCmd() ExecuteTaskRequest_Command {
	if m != nil {
		return m.Cmd
	}
	return ExecuteTaskRequest_START
}

func (m *ExecuteTaskRequest) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNKNOWN
}

func (m *ExecuteTaskRequest) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *ExecuteTaskRequest) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ExecuteTaskRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExecuteTaskRequest) GetConcurrency() uint32 {
	if m != nil {
		return m.Concurrency
	}
	return 0
}

func (m *ExecuteTaskRequest) GetRequests() uint32 {
	if m != nil {
		return m.Requests
	}
	return 0
}

func (m *ExecuteTaskRequest) GetRateLimit() uint32 {
	if m != nil {
		return m.RateLimit
	}
	return 0
}

func (m *ExecuteTaskRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// ExecuteTaskResponse for ExecuteTaskRequest, is used to report the results of this execution task.
type ExecuteTaskResponse struct {
	// Slave address
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// Task status
	Status ExecuteTaskResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=pb.ExecuteTaskResponse_Status" json:"status,omitempty"`
	// When status is equal to FAIL, error will be set
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Task results in json format
	Data                 string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteTaskResponse) Reset()         { *m = ExecuteTaskResponse{} }
func (m *ExecuteTaskResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteTaskResponse) ProtoMessage()    {}
func (*ExecuteTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_squeeze_c8f7ad5b2d33e9bc, []int{4}
}
func (m *ExecuteTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteTaskResponse.Unmarshal(m, b)
}
func (m *ExecuteTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteTaskResponse.Marshal(b, m, deterministic)
}
func (dst *ExecuteTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteTaskResponse.Merge(dst, src)
}
func (m *ExecuteTaskResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteTaskResponse.Size(m)
}
func (m *ExecuteTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteTaskResponse proto.InternalMessageInfo

func (m *ExecuteTaskResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ExecuteTaskResponse) GetStatus() ExecuteTaskResponse_Status {
	if m != nil {
		return m.Status
	}
	return ExecuteTaskResponse_SUCC
}

func (m *ExecuteTaskResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ExecuteTaskResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*HeartBeatRequest)(nil), "pb.HeartBeatRequest")
	proto.RegisterType((*HeartBeatRequest_SlaveInfo)(nil), "pb.HeartBeatRequest.SlaveInfo")
	proto.RegisterType((*HeartBeatRequest_Task)(nil), "pb.HeartBeatRequest.Task")
	proto.RegisterType((*HeartBeatResponse)(nil), "pb.HeartBeatResponse")
	proto.RegisterType((*TaskRequest)(nil), "pb.TaskRequest")
	proto.RegisterType((*ExecuteTaskRequest)(nil), "pb.ExecuteTaskRequest")
	proto.RegisterType((*ExecuteTaskResponse)(nil), "pb.ExecuteTaskResponse")
	proto.RegisterEnum("pb.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("pb.HeartBeatRequest_Task_Status", HeartBeatRequest_Task_Status_name, HeartBeatRequest_Task_Status_value)
	proto.RegisterEnum("pb.ExecuteTaskRequest_Command", ExecuteTaskRequest_Command_name, ExecuteTaskRequest_Command_value)
	proto.RegisterEnum("pb.ExecuteTaskResponse_Status", ExecuteTaskResponse_Status_name, ExecuteTaskResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SqueezeServiceClient is the client API for SqueezeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SqueezeServiceClient interface {
	// ExecuteTask is used to perform tasks on the slave node
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskResponse, error)
	// HeartBeat is used to report task status to master node
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (SqueezeService_HeartBeatClient, error)
}

type squeezeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSqueezeServiceClient(cc *grpc.ClientConn) SqueezeServiceClient {
	return &squeezeServiceClient{cc}
}

func (c *squeezeServiceClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskResponse, error) {
	out := new(ExecuteTaskResponse)
	err := c.cc.Invoke(ctx, "/pb.SqueezeService/ExecuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squeezeServiceClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (SqueezeService_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SqueezeService_serviceDesc.Streams[0], "/pb.SqueezeService/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &squeezeServiceHeartBeatClient{stream}
	return x, nil
}

type SqueezeService_HeartBeatClient interface {
	Send(*HeartBeatRequest) error
	Recv() (*HeartBeatResponse, error)
	grpc.ClientStream
}

type squeezeServiceHeartBeatClient struct {
	grpc.ClientStream
}

func (x *squeezeServiceHeartBeatClient) Send(m *HeartBeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *squeezeServiceHeartBeatClient) Recv() (*HeartBeatResponse, error) {
	m := new(HeartBeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SqueezeServiceServer is the server API for SqueezeService service.
type SqueezeServiceServer interface {
	// ExecuteTask is used to perform tasks on the slave node
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskResponse, error)
	// HeartBeat is used to report task status to master node
	HeartBeat(SqueezeService_HeartBeatServer) error
}

func RegisterSqueezeServiceServer(s *grpc.Server, srv SqueezeServiceServer) {
	s.RegisterService(&_SqueezeService_serviceDesc, srv)
}

func _SqueezeService_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqueezeServiceServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SqueezeService/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqueezeServiceServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqueezeService_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SqueezeServiceServer).HeartBeat(&squeezeServiceHeartBeatServer{stream})
}

type SqueezeService_HeartBeatServer interface {
	Send(*HeartBeatResponse) error
	Recv() (*HeartBeatRequest, error)
	grpc.ServerStream
}

type squeezeServiceHeartBeatServer struct {
	grpc.ServerStream
}

func (x *squeezeServiceHeartBeatServer) Send(m *HeartBeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *squeezeServiceHeartBeatServer) Recv() (*HeartBeatRequest, error) {
	m := new(HeartBeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SqueezeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SqueezeService",
	HandlerType: (*SqueezeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _SqueezeService_ExecuteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _SqueezeService_HeartBeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "squeeze.proto",
}

func init() { proto.RegisterFile("squeeze.proto", fileDescriptor_squeeze_c8f7ad5b2d33e9bc) }

var fileDescriptor_squeeze_c8f7ad5b2d33e9bc = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xef, 0x6e, 0xd3, 0x30,
	0x10, 0x5f, 0xd2, 0xf4, 0x4f, 0xae, 0xb4, 0x18, 0x33, 0x20, 0x54, 0xd3, 0xa8, 0x22, 0x21, 0x2a,
	0x24, 0xaa, 0xa9, 0x48, 0x08, 0xf1, 0x01, 0xb1, 0x75, 0xdd, 0x56, 0x6d, 0xa4, 0xc1, 0x49, 0x35,
	0xf1, 0xd1, 0x4d, 0x3c, 0x14, 0xad, 0x4d, 0x3a, 0x27, 0x9d, 0x18, 0x6f, 0x01, 0x6f, 0xc1, 0x9b,
	0xf0, 0x58, 0xc8, 0x76, 0x1a, 0x42, 0xb7, 0x7d, 0xbb, 0xfb, 0xdd, 0xef, 0x7c, 0x77, 0xbf, 0x3b,
	0x43, 0x2b, 0xbd, 0x5a, 0x31, 0xf6, 0x83, 0xf5, 0x97, 0x3c, 0xc9, 0x12, 0xac, 0x2f, 0x67, 0xf6,
	0x4f, 0x1d, 0xd0, 0x09, 0xa3, 0x3c, 0x3b, 0x60, 0x34, 0x23, 0xec, 0x6a, 0xc5, 0xd2, 0x0c, 0xbf,
	0x01, 0x23, 0xa3, 0xe9, 0xa5, 0xa5, 0x75, 0xb5, 0x5e, 0x73, 0xf0, 0xbc, 0xbf, 0x9c, 0xf5, 0x37,
	0x39, 0x7d, 0x9f, 0xa6, 0x97, 0x44, 0xd2, 0xf0, 0x00, 0x8c, 0x28, 0xbe, 0x48, 0x2c, 0x5d, 0xd2,
	0x77, 0xef, 0xa4, 0x7b, 0x73, 0x7a, 0xcd, 0xc6, 0xf1, 0x45, 0x42, 0x24, 0xb7, 0xf3, 0x0a, 0xcc,
	0x02, 0xc2, 0x1d, 0x68, 0x7c, 0xe3, 0xcb, 0xc0, 0x4d, 0x78, 0x26, 0x6b, 0xb6, 0x48, 0xe1, 0x77,
	0xae, 0xc0, 0x10, 0xa5, 0x70, 0x1b, 0xf4, 0x28, 0xcc, 0xa3, 0x7a, 0x14, 0xe2, 0xf7, 0x50, 0x4b,
	0x33, 0x9a, 0xad, 0x52, 0x59, 0xb6, 0x3d, 0xe8, 0xde, 0xdb, 0x65, 0xdf, 0x93, 0x3c, 0x92, 0xf3,
	0xed, 0x17, 0x50, 0x53, 0x08, 0x6e, 0x80, 0x71, 0x38, 0x71, 0x46, 0x68, 0x0b, 0x37, 0xa1, 0x4e,
	0xa6, 0x8e, 0x33, 0x76, 0x8e, 0x91, 0x66, 0x7f, 0x80, 0x47, 0xa5, 0x87, 0xd2, 0x65, 0x12, 0xa7,
	0x0c, 0xbf, 0x84, 0xaa, 0x18, 0x36, 0xb5, 0xb4, 0x6e, 0xa5, 0xd7, 0x1c, 0x3c, 0x14, 0xe5, 0xa4,
	0x06, 0xaa, 0x12, 0x51, 0x51, 0xbb, 0x05, 0xcd, 0x12, 0x6a, 0xff, 0xd1, 0x01, 0x8f, 0xbe, 0xb3,
	0x60, 0x95, 0xb1, 0x12, 0x8c, 0xf7, 0xa0, 0x12, 0x2c, 0xd4, 0x34, 0x6d, 0x25, 0xd8, 0x6d, 0x52,
	0x7f, 0x98, 0x2c, 0x16, 0x34, 0x0e, 0x89, 0xa0, 0xe2, 0x1e, 0x34, 0xe4, 0xd2, 0x82, 0x64, 0x9e,
	0x0f, 0xfc, 0x40, 0xa4, 0xb9, 0x39, 0x46, 0x8a, 0xa8, 0x10, 0x33, 0xa0, 0xf3, 0xf9, 0x8c, 0x06,
	0x97, 0x56, 0xa5, 0xab, 0xf5, 0x4c, 0x52, 0xf8, 0x22, 0x16, 0xae, 0x38, 0xcd, 0xa2, 0x24, 0xb6,
	0x0c, 0x25, 0xf4, 0xda, 0xcf, 0x05, 0xae, 0x16, 0x02, 0x77, 0xa1, 0x19, 0x24, 0x71, 0xb0, 0xe2,
	0x9c, 0xc5, 0xc1, 0x8d, 0x55, 0x93, 0x81, 0x32, 0x24, 0x5e, 0xe3, 0xaa, 0xd7, 0xd4, 0xaa, 0xab,
	0xd7, 0xd6, 0x3e, 0xde, 0x01, 0x93, 0xd3, 0x8c, 0x9d, 0x45, 0x8b, 0x28, 0xb3, 0x1a, 0x32, 0xf8,
	0x0f, 0xc0, 0x18, 0x8c, 0x90, 0x66, 0xd4, 0x32, 0x65, 0x7f, 0xd2, 0xb6, 0x77, 0xa1, 0x9e, 0x4f,
	0x8c, 0x4d, 0xa8, 0x7a, 0xfe, 0x3e, 0xf1, 0xd1, 0x96, 0x58, 0x91, 0xe7, 0x4f, 0x5c, 0xa4, 0xd9,
	0xbf, 0x35, 0x78, 0xfc, 0x9f, 0x4a, 0xf9, 0x62, 0x30, 0x18, 0x34, 0x0c, 0xb9, 0x14, 0xd3, 0x24,
	0xd2, 0xc6, 0xef, 0x36, 0x8e, 0xe3, 0xb6, 0xc4, 0x2a, 0x79, 0xe3, 0x34, 0xf0, 0x36, 0x54, 0x19,
	0xe7, 0x09, 0xcf, 0x85, 0x53, 0x4e, 0xd1, 0xad, 0x51, 0xea, 0x76, 0xa7, 0x7c, 0x44, 0xde, 0x74,
	0x38, 0x54, 0xbd, 0x1e, 0xed, 0x8f, 0xcf, 0x90, 0xf6, 0xfa, 0x06, 0x1a, 0xeb, 0xcd, 0x88, 0xd3,
	0x9a, 0x3a, 0xa7, 0xce, 0xe4, 0xdc, 0x51, 0x94, 0x13, 0xdf, 0x77, 0x91, 0x86, 0xeb, 0x50, 0xf1,
	0x87, 0x2e, 0xd2, 0x85, 0x31, 0x3d, 0x74, 0x51, 0x45, 0x4c, 0x4d, 0x46, 0x87, 0x63, 0x0f, 0x19,
	0xc2, 0xfc, 0xfc, 0xd5, 0xfb, 0x72, 0x86, 0xaa, 0xd2, 0x9c, 0x38, 0xc7, 0x13, 0x54, 0x13, 0xc9,
	0xc7, 0xc4, 0x1d, 0xa2, 0x3a, 0x06, 0xa8, 0xf9, 0x27, 0x64, 0x7c, 0xe4, 0xa3, 0x06, 0x6e, 0x81,
	0x79, 0x3e, 0x3a, 0xf0, 0x26, 0xc3, 0xd3, 0x91, 0x8f, 0xcc, 0xc1, 0x2f, 0x0d, 0xda, 0x9e, 0xfa,
	0xe6, 0x1e, 0xe3, 0xd7, 0x51, 0xc0, 0xf0, 0x27, 0x68, 0x96, 0x66, 0xc7, 0x4f, 0xef, 0xbe, 0xb7,
	0xce, 0xb3, 0x7b, 0x44, 0xb2, 0xb7, 0xf0, 0x47, 0x30, 0x8b, 0x1f, 0x81, 0xb7, 0xef, 0xfa, 0x69,
	0x9d, 0x27, 0x1b, 0xe8, 0x3a, 0xb7, 0xa7, 0xed, 0x69, 0xb3, 0x9a, 0xbc, 0xce, 0xb7, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x2e, 0x14, 0x00, 0x29, 0x81, 0x04, 0x00, 0x00,
}
