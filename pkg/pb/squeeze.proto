// Copyright 2019 Squeeze Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package pb;

// SqueezeService definition, used to communication between master and slave
service SqueezeService {
    // ExecuteTask is used to perform tasks on the slave node
    rpc ExecuteTask (ExecuteTaskRequest) returns (ExecuteTaskResponse) {}

    // HeartBeat is used to report task status to master node
    rpc HeartBeat (stream HeartBeatRequest) returns (stream HeartBeatResponse) {}
}

// HeartBeatRequest describes the tasks status on the slave
// and the information about the slave & host.
message HeartBeatRequest {
    message SlaveInfo {
        uint32 grpcPort = 1;
    }
    message Task {
        uint32 id = 1;
        enum Status {
            DONE = 0;
            RUNNING = 1;
        }
        Status status = 2;
    }
    Task task = 1;
    SlaveInfo info = 2;
}

// HeartBeatResponse for HeartBeatRequest, is used to send tasks from master to slave.
// !!!Send task is not yet supported!!!
message HeartBeatResponse {
    repeated TaskRequest tasks = 1;
}

message TaskRequest {

}

// ExecuteTaskRequest describes the task information to be executed.
message ExecuteTaskRequest {
    enum Command {
        START = 0;
        STOP = 1;
    }
    Command cmd = 1;
    Protocol protocol = 2;
    string callback = 3;
    uint32 duration = 4;
    uint32 id = 5;
    uint32 concurrency = 6;
    uint32 requests = 7;
    uint32 rateLimit = 8;
    string data = 9;
}

// ExecuteTaskResponse for ExecuteTaskRequest, is used to report the results of this execution task.
message ExecuteTaskResponse {
    enum Status {
        SUCC = 0;
        FAIL = 1;
    }
    // Slave address
    string addr = 1;
    // Task status
    Status status = 2;
    // When status is equal to FAIL, error will be set
    string error = 3;
    // Task results in json format
    string data = 4;
}

// All supported protocols
enum Protocol {
    UNKNOWN = 0;
    HTTP = 1;
    TCP = 2;
    UDP = 3;
    REDIS = 4;
    MYSQL = 5;
    MONGO = 6;
    GRPC = 7;
    THRIFT = 8;
    WEBSOCKET = 9;
}